#!/usr/bin/python3

##################### XZ Lang source
#
####### Made by Aceinet 2022-present
# 
# Github: https://github.com/Aceinet
####################################

import os, sys, re, shlex

variables = {
    "!hello": "Hello, world!"
}
ifst = { # Information for current IF Statement in file
    "var": None,
    "equal": None,
    "active": False,
    "elsecon": False
}

toexit = 0
class error: # Error thrower
    def throw(name, details):
        global inter, toexit
        print(f"""
__Execution error__
{name}: {details}""")
        toexit = 1
        if inter == 0: 
            exit(1)
            toexit = 0


class warn: # Warning thrower
    def throw(name, details):
        print(f"""
Warning:
{name}: {details}""")
              

##############
#XZLang: Lexer
##############
class lexer:
    def __init__(self):
        pass

    def tokenize(self, code):
        self.code = code.replace(';', ' ;').replace('X[E0', ';') # Replacing like: out "hi"; to out "hi" ; for making word
        src = shlex.split(self.code, posix=False) # Using shlex split for strings

        tokens = []

        for word in src: # Looping through list items
            if word == "out": tokens.append(["KOut", word])
            elif word == "in": tokens.append(["KInput", word])
            elif word == "val": tokens.append(["KVal", word])
            elif word == "convert": tokens.append(["KConvert", word])
            elif word == "free": tokens.append(["KFree", word])
            elif word == "include": tokens.append(["KInclude", word])
            elif word == "exit": tokens.append(["KExit", word])
            elif word == "?": tokens.append(["Comment", word])
            elif word == "-?": tokens.append(["CommentEnd", word])
            elif word == "none": tokens.append(["TNone", word])
            elif word[0] == '"' and word[len(word)-1] == '"': tokens.append(["TStr", word[1:len(word)-1]])
            elif word == "if": tokens.append(["STif", word])
            elif word == "else": tokens.append(["STelse", word])
            elif word == "end": tokens.append(["STend", word])
            elif re.match("[a-z]", word) or re.match("[A-Z]", word): tokens.append(["Indentifier", word])
            elif word == ';': tokens.append(["End", word])
            elif word in "+-=/*": tokens.append(["Op", word])
            elif word == "==": tokens.append(["Eq", word])
            elif str(type(eval(word))) == "<class 'int'>":  tokens.append(["TInt", word]) # Checking if word if float / int
            elif str(type(eval(word))) == "<class 'float'>":  tokens.append(["TFloat", word])
            else: error.throw("Tokens.Error", "Unknown word: %s" % word)

        tokens.append(["FLEnd", None]) # Adding empty token to prevent IndexError

        if verbose == True:
            print("Execution")
            print("Tokens:")
            print(tokens)
            print("-------\n\n")

        return tokens


###############
#XZLang: Parser
###############
class parser:
    def __init__(self): pass

    def run(self, tokens):
        global toexit, lxr, prs, variables
        self.tokens = tokens
        c = 0
        end = False
        iscomment = False
        for tkn in self.tokens:
            if toexit == 1: break

            if self.tokens[c][0] == "End": end = False 
            elif self.tokens[c][0] == "STend": ifst["active"] = False
            elif self.tokens[c][0] == "CommentEnd": iscomment = False
            elif self.tokens[c][0] == "STelse": 
                ifst["elsecon"] = True

            if iscomment == True: 
                c += 1
                continue
            if end == True: 
                c += 1
                continue
            
            if ifst["active"] == True: # Checking for 'IF' Statement is active
                if ifst["elsecon"] == True: # If in statement found 'ELSE' block
                    if variables[ifst["var"]] == variables[ifst["equal"]]:
                        c += 1; continue
                
                else:
                    if variables[ifst["var"]] != variables[ifst["equal"]]: 
                        c += 1; continue
        
            if self.tokens[c][0] == "KOut": # Handler for 'out' keyword
                if self.tokens[c+1][0] != "TStr": 
                    error.throw("Out.TypeError", "Only strings accepted"); continue

                s = str(self.tokens[c+1][1])
                cvars = ""
                cs = ""
                cvar = False
                ent = False
                for char in s:
                    if char == '^': # Check if variable is ended
                        cvar = False
                        ent = True
                
                    if cvar == True:
                        cvars += char
                    else:
                        if cvars:
                            for var in variables:
                                if str(var) == cvars:
                                    cs += str(variables[str(var)])
                            cvars = ""


                    if char == '$': cvar = True # Checking if user wants to attach a variable
                    else: 
                        if cvar == False and ent == False: cs += char

                    ent = False

                cs = cs.replace('\\n', '\n')
                print(cs, end='')

                end = True
                    
            elif self.tokens[c][0] == "KConvert": # Handler for 'convert' keyword
                    vartype = str(type(self.tokens[c+1][0])).replace('<class ', '').replace(">", '').replace("'", '')
                    if self.tokens[c+1][0] != "Indentifier": 
                        error.throw("Convert.ExceptionError", "Excepted variable name as indendifier"); continue
                    elif self.tokens[c+2][1] not in "intfloatstrnone": 
                        error.throw("Convert.TypeError", "Unknown type to convert"); continue
                    
                    try:
                        if self.tokens[c+2][1] == "none": variables[self.tokens[c+1][1]] = None
                        else: variables[self.tokens[c+1][1]] = eval(f"{self.tokens[c+2][1]}(variables[self.tokens[c+1][1]])")
                    except: error.throw("ConvertationError", f"Cannot convert {vartype} -> {self.tokens[c+2][1]}")
                
                    end = True

            elif self.tokens[c][0] == "KVal": # Handler for 'val' keyword
                if self.tokens[c+1][0] != "Indentifier": 
                    error.throw("Val.ExceptionError", "Excepted variable name as indendifier"); continue
                elif self.tokens[c+2][0] != "Op": 
                    error.throw("Val.ExceptionError", "Excepted equal sign to define variable"); continue

                if self.tokens[c+1][1][0] == '!':
                    error.throw("Val.ReservedError", "Cannot manage with language-reserved variables"); continue
                
                if self.tokens[c+2][1] == '=':
                    if self.tokens[c+3][0] == "TStr":
                        variables[self.tokens[c+1][1]] = str(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "TInt":
                        variables[self.tokens[c+1][1]] = int(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "TFloat":
                        variables[self.tokens[c+1][1]] = float(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "Indentifier":
                        variables[self.tokens[c+1][1]] = variables[self.tokens[c+3][1]]
                    elif self.tokens[c+3][0] == "TNone":
                        variables[self.tokens[c+1][1]] = None
                    else:
                        error.throw("Val.TypeError", f"Unsupported type for variable ({self.tokens[c+3][0]})"); continue

                elif self.tokens[c+2][1] == '+': # Plus
                    if self.tokens[c+3][0] == "TInt":
                        variables[self.tokens[c+1][1]] += int(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "TFloat":
                        variables[self.tokens[c+1][1]] += float(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "Indentifier":
                        variables[self.tokens[c+1][1]] += variables[self.tokens[c+3][1]]
                elif self.tokens[c+2][1] == '-': # Minus
                    if self.tokens[c+3][0] == "TInt":
                        variables[self.tokens[c+1][1]] -= int(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "TFloat":
                        variables[self.tokens[c+1][1]] -= float(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "Indentifier":
                        variables[self.tokens[c+1][1]] -= variables[self.tokens[c+3][1]]
                    else:
                        variables[self.tokens[c+1][1]] -= self.tokens[c+3][1]
                elif self.tokens[c+2][1] == '/': # Divide
                    if self.tokens[c+3][0] == "TInt":
                        variables[self.tokens[c+1][1]] = variables[self.tokens[c+1][1]] // int(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "TFloat":
                        variables[self.tokens[c+1][1]] = variables[self.tokens[c+1][1]] / float(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "Indentifier":
                        variables[self.tokens[c+1][1]] = variables[self.tokens[c+1][1]] / variables[self.tokens[c+3][1]]
                    else:
                        variables[self.tokens[c+1][1]] = variables[self.tokens[c+1][1]] / self.tokens[c+3][1]
                elif self.tokens[c+2][1] == '*': # Multiply
                    if self.tokens[c+3][0] == "TInt":
                        variables[self.tokens[c+1][1]] *= int(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "TFloat":
                        variables[self.tokens[c+1][1]] *= float(self.tokens[c+3][1])
                    elif self.tokens[c+3][0] == "Indentifier":
                        variables[self.tokens[c+1][1]] *= variables[self.tokens[c+3][1]]
                    else:
                        variables[self.tokens[c+1][1]] *= self.tokens[c+3][1]
                else: 
                    error.throw("Val.OpError", f"Unsupported operator: {self.tokens[c+2][1]}"); continue
                    
                    end = True
                
            elif self.tokens[c][0] == "STif": # Handler for 'if' keyword
                if self.tokens[c+1][0] != "Indentifier": 
                    error.throw("Statement.If", "Not a variable"); continue
                elif self.tokens[c+2][0] != "Eq": 
                    error.throw("Statement.If", "Condition not found"); continue

                ifst["active"] = True
                ifst["elsecon"] = False
                ifst["var"] = self.tokens[c+1][1]        
                ifst["equal"] = self.tokens[c+3][1]

            elif self.tokens[c][0] == "KInput": # Handler for 'in' keyword
                if self.tokens[c+1][0] != "Indentifier":
                    error.throw("in.TypeError", "Cannot write to non-variable identifier"); continue
                
                while True:
                    kinput = input()
                    if kinput: break

                variables[self.tokens[c+1][1]] = str(kinput)

                end = True

            elif self.tokens[c][0] == 'Comment':
                iscomment = True

            elif self.tokens[c][0] == "STelse": ifst["elsecon"] = True # Handler for 'else' keyword
            
            elif self.tokens[c][0] == "KInclude": # Handler for 'include' keyword
                if self.tokens[c+1][0] != "TStr":
                    error.throw("Include.TypeError", "Excepted file name as string"); continue
                
                include_file = self.tokens[c+1][1]+'.xzl'
                os.system("xzl "+include_file)

                end = True

            elif self.tokens[c][0] == "KExit": # Handler for 'exit' keyword
                if self.tokens[c+1][0] not in ["TInt", "Indentifier"]:
                    error.throw("Exit.TypeError", "Excepted integer or variable"); continue
                
                if self.tokens[c+1][0] == "TInt":
                    exit(int(self.tokens[c+1][0]))
                elif self.tokens[c+1][0] == "Indentifier":
                    try:
                        exit(int(variables[str(self.tokens[c+1][1])]))
                    except ValueError:
                        error.throw("Exit.TypeError", "Excepted integer or variable"); continue
                    
            elif self.tokens[c][0] == "KFree": # Handler for 'free' keyword
                if self.tokens[c+1][0] != "Indentifier":
                    if self.tokens[c+1][0] != "TStr":
                        error.throw("Free.TypeError", "Excepted variable"); continue

                if self.tokens[c+1][1][0] == '!':
                    error.throw("Free.ReservedError", "Cannot manage with language-reserved variables"); continue
                
                if self.tokens[c+1][1] == "*":
                    nvariables = {}
                    for variable in variables:
                        if str(variable)[0] == '!':
                            nvariables[str(variable)] = variables[str(variable)]

                    variables = nvariables

                    warn.throw("Free.WFreeAll", "Freeing all variables is not secure") 

                else:
                    try:
                        del variables[self.tokens[c+1][1]]
                    except KeyError:
                        error.throw("Free.KeyError", "Cannot find variable"); continue

                end = True

            c += 1

inter = 0
verbose = False
if __name__ == "__main__":
    lxr = lexer()
    prs = parser()

    if len(sys.argv) < 2:
        print(f"Usage: xz myfile.xzl")
        exit(1)

    if len(sys.argv) == 3:
        if sys.argv[2] == 'verbose': verbose = True

    try:
        fl = open(sys.argv[1], "+r").read()
    except: 
        print("Cannot locate file")
        exit(1)

    fltype = sys.argv[1][len(sys.argv[1])-3:len(sys.argv[1])] # Checking file type
    if fltype != 'xzl':
        print("File doesnt looks like a xz lang file!")
        exit(1)

    tkns = lxr.tokenize(fl)
    prs.run(tkns)
    if verbose == True:
        print("\n\nEXECUTION END")
        print(f"Variables: {variables}")